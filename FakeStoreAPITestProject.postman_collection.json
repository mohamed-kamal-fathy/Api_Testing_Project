{
	"info": {
		"_postman_id": "6de653c8-8d37-4ddf-958e-307369780497",
		"name": "Fake Store API Test Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25130296",
		"_collection_link": "https://web.postman.co/workspace/Team-Workspace~c5db40dc-58ec-4d24-85bb-b767f88c6f82/collection/25130296-6de653c8-8d37-4ddf-958e-307369780497?source=collection_link"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Valid Tests",
					"item": [
						{
							"name": "Get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Number of Products shown is '20'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(20);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check ID of the first product is '1'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.eql(1);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check ID of the last product is '20'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[19].id).to.eql(20);\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"    responseData.forEach(product => {\r",
											"        pm.expect(product).to.have.all.keys('id', 'title', 'price', 'description', 'category', 'image', 'rating');\r",
											"        pm.expect(product.title).to.be.a('string');\r",
											"        pm.expect(product.price).to.be.a('number');\r",
											"        pm.expect(product.description).to.be.a('string');\r",
											"        pm.expect(product.category).to.be.a('string');\r",
											"        pm.expect(product.image).to.be.a('string');\r",
											"        pm.expect(product.rating).to.be.an('object').that.has.all.keys('rate', 'count');\r",
											"        pm.expect(product.rating.rate).to.be.a('number');\r",
											"        pm.expect(product.rating.count).to.be.a('number');\r",
											"    });\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Price is a positive number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    responseData.forEach(product => {\r",
											"        pm.expect(product).to.have.property('price').that.is.a('number').and.is.above(0, \"Price should be a positive number\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Rating object contains valid rate and count values\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"\r",
											"    responseData.forEach(product => {\r",
											"        pm.expect(product.rating).to.be.an('object');\r",
											"        pm.expect(product.rating.rate).to.be.a('number').and.to.be.at.least(0);\r",
											"        pm.expect(product.rating.count).to.be.a('number').and.to.be.at.least(0);\r",
											"    });\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"The title must be a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"    responseData.forEach(product => {\r",
											"        pm.expect(product.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"    });\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Response Content-Type is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/products",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Limit results of Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Count of Products shown is '5'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(5);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Last ID of Product shown is '5'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[4].id).to.eql(5);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/Products?limit=5",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"Products"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort results of Products (Desc)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Count of Products is '20'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(20);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check First Product ID is '20'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.eql(20);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Last Product ID is '1'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[19].id).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/Products?sort=desc",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"Products"
									],
									"query": [
										{
											"key": "sort",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get products in a specific Category",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '6000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"/*\r",
											"pm.test(\"Check Number of Jewelery products is '4'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(4);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check All products follow Jewelery Category\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"        jsonData.forEach(function(product) {\r",
											"        pm.expect(product.category).to.eql('jewelery');\r",
											"    });\r",
											"});\r",
											"*/\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"E2E Product\",\r\n  \"price\": 55.5,\r\n  \"description\": \"Part of E2E Test\",\r\n  \"image\": \"https://i.pravatar.cc\",\r\n  \"category\": \"electronics\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/products/category/{{category}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products",
										"category",
										"{{category}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID is created \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.exist;\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check ID of the product is '21'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(21);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Title of the product is Manual Test Product\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.equal(\"Manual Test Product\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"Manual Test Product\",\r\n  \"price\": 99.99,\r\n  \"description\": \"A product added during testing\",\r\n  \"image\": \"https://i.pravatar.cc\",\r\n  \"category\": \"electronics\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/products",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a product (using PUT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID of Product is '5'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(5);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if Title of Product is 'update Test product'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.equal(\"update Test product\");\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.all.keys('id', 'title', 'price', 'description', 'image', 'category');\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Price must be a non-negative number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.price).to.be.a('number').and.to.be.at.least(0, \"Price should not be negative\");\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Title is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Response Content-Type is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Response schema matches the expected structure\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.all.keys('id', 'title', 'price', 'description', 'image', 'category');\r",
											"\r",
											"    pm.expect(responseData.id).to.be.a('number');\r",
											"    pm.expect(responseData.title).to.be.a('string');\r",
											"    pm.expect(responseData.price).to.be.a('number');\r",
											"    pm.expect(responseData.description).to.be.a('string');\r",
											"    pm.expect(responseData.image).to.be.a('string');\r",
											"    pm.expect(responseData.category).to.be.a('string');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": 0,\r\n  \"title\": \"update Test product\",\r\n  \"price\": 50.0,\r\n  \"description\": \"string\",\r\n  \"category\": \"string\",\r\n  \"image\": \"http://example.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/products/{{ProductNum}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products",
										"{{ProductNum}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Product (using PATCH)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID of Product is '5'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.equal(5);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if Title of Product is 'test'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.title).to.equal(\"test\");\r",
											"});\r",
											"\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Response has required fields: id and title\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.all.keys('id', 'title');\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Title must be a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.title).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Response Content-Type is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"The id must be a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.exist.and.to.be.a('number').and.to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/products/{{ProductNum}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products",
										"{{ProductNum}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '6000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID of Product is '5'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(5);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/products/{{ProductNum}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products",
										"{{ProductNum}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "a single product",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{BaseURL}}/products/{{productId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products",
										"{{productId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "products sorted and limited",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/Products?sort=desc&limit=5",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"Products"
									],
									"query": [
										{
											"key": "sort",
											"value": "desc"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid Tests",
					"item": [
						{
							"name": "Invalid Product ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '1000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Response headers contain 'Content-Type' as 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/products/{{invalid_Id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"products",
										"{{invalid_Id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Carts",
			"item": [
				{
					"name": "Valid Tests",
					"item": [
						{
							"name": "Get all Carts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '1000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Count of Carts shown is '7'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(7);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check ID of First Cart shown is '1'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.eql(1);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check ProductID of First Cart shown is '1'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var firstProductID = jsonData[0].products[0].productId;\r",
											"    pm.expect(firstProductID).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Cart by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check this is Cart number '5'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(5);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts/{{CartNum}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										"{{CartNum}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Limit results of Carts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '5000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Count of Carts shown is '5'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(5);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts?limit=5",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort results of Carts (DESC)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Count of Carts is '7'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(7);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check First Cart ID is '7'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.eql(7);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts?sort=desc",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts"
									],
									"query": [
										{
											"key": "sort",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Carts in a specific Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Count of Carts shown is '1'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Date of Cart shown is '2020-01-01'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].date).to.eql(\"2020-01-01T00:00:00.000Z\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts?enddate=2020-01-01",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts"
									],
									"query": [
										{
											"key": "enddate",
											"value": "2020-01-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Carts in a Date range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Count of Carts shown is '2'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(2);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if Dates are within Range\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    var startDate = new Date(\"2020-01-01T00:00:00.000Z\");\r",
											"    var endDate = new Date(\"2020-01-03T00:00:00.000Z\");\r",
											"\r",
											"    jsonData.forEach(function(cart) {\r",
											"        var cartDate = new Date(cart.date);\r",
											"        pm.expect(cartDate >= startDate && cartDate <= endDate).to.be.true;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts?startdate=2019-01-01&enddate=2020-01-02",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts"
									],
									"query": [
										{
											"key": "startdate",
											"value": "2019-01-01"
										},
										{
											"key": "enddate",
											"value": "2020-01-02"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Carts of specific User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Number of Users shown is '1'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(1);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check this is User number '2'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].userId).to.eql(2);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts/user/{{userId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new product in Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID is created \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.exist;\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID is '11'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(11);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if UserID isn't created \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userid).to.not.exist;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 20,\r\n  \"date\": \"2025-07-20\",\r\n  \"products\": [\r\n    { \"productId\": 1, \"quantity\": 2 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/carts",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID is created \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.exist;\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID is '5'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(5);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 1,\r\n  \"date\": \"2025-07-22\",\r\n  \"products\": [\r\n    { \"productId\": 11, \"quantity\": 2 }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/carts/{{CartNum}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										"{{CartNum}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '6000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID of Product is '5'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(5);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if UserID of Product is '3'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.userId).to.eql(3);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts/{{CartNum}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										"{{CartNum}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update cart",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": 1,\r\n  \"date\": \"2025-07-22\",\r\n  \"products\": [\r\n    { \"productId\": 11, \"quantity\": 2 }\r\n  ]\r\n}\r\n"
								},
								"url": {
									"raw": "{{BaseURL}}/carts/{{CartNum}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										"{{CartNum}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid Tests",
					"item": [
						{
							"name": "Invalid Cart ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '1000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"\r",
											"pm.test(\"Validate the Content-Type header is 'application/json'\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/carts/{{invalid_Id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"carts",
										"{{invalid_Id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Valid Tests",
					"item": [
						{
							"name": "Get all Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '1000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Number of Users shown is '10'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(10);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get User by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '5000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check this is User number '2'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/{{userId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Limit results of User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '5000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Count of Users shown is '5'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(5);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users?limit=5",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort results of Users (DESC)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Count of Users is '10'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length).to.eql(10);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check First User ID is '10'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.eql(10);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users?sort=desc",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "sort",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a new User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID is created \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the correct Content-Type header\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"ID is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body is not empty\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object').that.is.not.empty;\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Validate the response schema against the expected structure\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.all.keys('id');\r",
											"    pm.expect(responseData.id).to.be.a('number');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"test@example.com\",\r\n  \"username\": \"mohamed\",\r\n  \"password\": \"12345\",\r\n  \"name\": {\r\n    \"firstname\": \"mohamed\",\r\n    \"lastname\": \"kamal\"\r\n  },\r\n  \"address\": {\r\n    \"city\": \"Cairo\",\r\n    \"street\": \"Main St\",\r\n    \"number\": 5,\r\n    \"zipcode\": \"12345\",\r\n    \"geolocation\": {\r\n      \"lat\": \"30.0\",\r\n      \"long\": \"31.0\"\r\n    }\r\n  },\r\n  \"phone\": \"1234567890\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a User (using PUT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID is created \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.exist;\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check this is User number '10'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.eql(10);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"address\": {\r\n            \"geolocation\": {\r\n                \"lat\": \"-37.3159\",\r\n                \"long\": \"81.1496\"\r\n            },\r\n            \"city\": \"kilcoole\",\r\n            \"street\": \"new road\",\r\n            \"number\": 7682,\r\n            \"zipcode\": \"12926-3874\"\r\n        },\r\n        \"id\": 10,\r\n        \"email\": \"john@gmail.com\",\r\n        \"username\": \"johnd\",\r\n        \"password\": \"m38rmF$\",\r\n        \"name\": {\r\n            \"firstname\": \"john\",\r\n            \"lastname\": \"doe\"\r\n        },\r\n        \"phone\": \"1-570-236-7033\",\r\n        \"__v\": 0\r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users/{{userId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update a Users (using PATCH)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID is created \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.exist;\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check this is User number '10'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0].id).to.eql(10);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    {\r\n        \"id\":10,\r\n        \"email\": \"john@gmail.com\",\r\n        \"username\": \"johnd\",\r\n        \"password\": \"m38rmF$\"\r\n        \r\n         \r\n    }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/users/{{userId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '6000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if ID of Product is '2'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).to.eql(2);\r",
											"});\r",
											"\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"\r",
											"pm.test(\"Validate the structure of the address object\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.address).to.exist.and.to.be.an('object');\r",
											"    \r",
											"    pm.expect(responseData.address.geolocation).to.exist.and.to.be.an('object');\r",
											"    pm.expect(responseData.address.geolocation).to.include.all.keys('lat', 'long');\r",
											"    \r",
											"    pm.expect(responseData.address).to.include.all.keys('city', 'street', 'number', 'zipcode');\r",
											"    pm.expect(responseData.address.city).to.be.a('string');\r",
											"    pm.expect(responseData.address.street).to.be.a('string');\r",
											"    pm.expect(responseData.address.number).to.be.a('number');\r",
											"    pm.expect(responseData.address.zipcode).to.be.a('string');\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Email is in a valid format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Name contains valid firstname and lastname strings\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.name.firstname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Firstname should not be empty\");\r",
											"    pm.expect(responseData.name.lastname).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Lastname should not be empty\");\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"ID is a non-negative integer\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"ID should be a non-negative integer\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/{{userId}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid Tests",
					"item": [
						{
							"name": "Invalid user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '1000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"/*pm.test(\"Check if response body is contains 'null'\", function () {\r",
											"    const responseText = pm.response.text().trim();\r",
											"    pm.expect(responseText === \"null\" ).to.be.true;\r",
											"});\r",
											"*/\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BaseURL}}/users/{{invalid_Id}}",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"users",
										"{{invalid_Id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Valid Tests",
					"item": [
						{
							"name": "Login Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '200'\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check if Token is created \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token).to.exist;\r",
											"});\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Response has a valid Content-Type of application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Token is a non-empty string\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.token).to.exist.and.to.be.a('string').and.to.have.lengthOf.above(0, \"Token should not be empty\");\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Response schema validation for token field\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData).to.have.all.keys('token');\r",
											"});\r",
											"\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"\r",
											"pm.test(\"The token must have a minimum length of 10 characters\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.token).to.exist.and.to.have.lengthOf.at.least(10, \"Token length should be at least 10 characters\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"mor_2314\",\r\n  \"password\": \"83r5^_\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/auth/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid Tests",
					"item": [
						{
							"name": "Missing Fields like UserName",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '400' (Bad Request for missing fields)\", function () {\r",
											"    pm.response.to.have.status(400); // Adjust to 401 or 403 if API returns those\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check error message for missing username \", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText).to.include(\"username and password are not provided in JSON format\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"83r5^_\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/auth/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Fields like Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '400' (Bad Request for missing fields)\", function () {\r",
											"    pm.response.to.have.status(400); // Adjust to 401 or 403 if API returns those\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check error message for missing password \", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText).to.include(\"username and password are not provided in JSON format\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"mor_2314\"\r\n  \r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/auth/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong Credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check Status code is '401' (Unauthorized for wrong credentials)\", function () {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"// ==================== TEST CASE =====================\r",
											"pm.test(\"Check error message for incorrect username or password\", function () {\r",
											"    const responseText = pm.response.text();\r",
											"    pm.expect(responseText).to.include(\"username or password is incorrect\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"mohamed\",\r\n  \"password\": \"12345\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BaseURL}}/auth/login",
									"host": [
										"{{BaseURL}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "End-to-End Scenario",
			"item": [
				{
					"name": "Login to get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save token to environment variable\r",
									"let response = pm.response.json();\r",
									"if (response.token) {\r",
									"    pm.environment.set(\"token\", response.token);\r",
									"}\r",
									"pm.test(\"Check Response time is less than '3000'ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check Status code is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check if Token is created \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"mor_2314\",\r\n  \"password\": \"83r5^_\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/auth/login",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"if (response.id) {\r",
									"    pm.environment.set(\"productId\", response.id);  \r",
									"}\r",
									"\r",
									"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check Status code is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check if ID is created \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.exist;\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check ID of the product is '21'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.equal(21);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check Title of the product is E2E Product\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.equal(\"E2E Product\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"E2E Product\",\r\n  \"price\": 55.5,\r\n  \"description\": \"Part of E2E Test\",\r\n  \"image\": \"https://i.pravatar.cc\",\r\n  \"category\": \"electronics\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/products",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Cart with Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check Status code is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check if ID is created \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.exist;\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check if ID is '11'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(11);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check if UserID isn't created \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.userid).to.not.exist;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 1,\r\n  \"date\": \"2025-07-22\",\r\n  \"products\": [\r\n    {\r\n      \"productId\": {{productId}},\r\n      \"quantity\": 2\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/carts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let carts = pm.response.json();\r",
									"if (carts.length > 0) {\r",
									"    // Get the last cart in the array\r",
									"    let latestCart = carts[carts.length - 1]; \r",
									"    pm.environment.set(\"latestCartId\", latestCart.id);\r",
									"}\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check Response time is less than '2000'ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check Status code is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check Count of Carts shown is '7'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(7);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check ID of First Cart shown is '1'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Check ProductID of First Cart shown is '1'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var firstProductID = jsonData[0].products[0].productId;\r",
									"    pm.expect(firstProductID).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "View Latest Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let latestCartId = pm.environment.get(\"latestCartId\");\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"User has carts\", function () {\r",
									"    let carts = pm.response.json();\r",
									"    pm.expect(carts.products.length).to.be.above(0);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"let carts = pm.response.json();\r",
									"let lastCart = carts; \r",
									"\r",
									"pm.test(\"Last cart has products\", function () {\r",
									"    pm.expect(lastCart.products.length).to.be.above(0);\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"\r",
									"pm.test(\"Response has required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.all.keys('id', 'userId', 'date', 'products', '__v');\r",
									"});\r",
									"// ==================== TEST CASE =====================\r",
									"\r",
									"pm.test(\"Products array contains objects with valid structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.products).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.products.forEach(function(product) {\r",
									"        pm.expect(product).to.be.an('object');\r",
									"        pm.expect(product).to.have.all.keys('productId', 'quantity');\r",
									"        pm.expect(product.productId).to.be.a('number').that.is.at.least(0);\r",
									"        pm.expect(product.quantity).to.be.a('number').that.is.at.least(0);\r",
									"    });\r",
									"});\r",
									"\r",
									"// ==================== TEST CASE =====================\r",
									"pm.test(\"Each product has a valid productId and quantity greater than zero\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.products).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    responseData.products.forEach(product => {\r",
									"        pm.expect(product.productId).to.be.a('number').and.to.be.at.least(1, \"productId should be greater than zero\");\r",
									"        pm.expect(product.quantity).to.be.a('number').and.to.be.above(0, \"quantity should be greater than zero\");\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/carts/{{latestCartId}}",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"carts",
								"{{latestCartId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}